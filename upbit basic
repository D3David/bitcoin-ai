import os
from dotenv import load_dotenv
load_dotenv()

def ai_tranding():
    #.1. 업비트 차트 데이터 가져오기 (30일봉)
    import pyupbit
    df=pyupbit.get_ohlcv("KRW-BTC", count=30,interval="day")
    # print(df.to_json())

    #2. AI에게 데이터 제공하고 판단 받기
    from openai import OpenAI
    client = OpenAI()

    response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {
        "role": "system",
        "content": [
            {
            "type": "text",
            "text": "You are a Bitcoin investing expert. \nTell me whether to buy, sell, or hold based on the chart data provided.\nresponse in json format.\n\nresponse example:\n{\"decision\":\"buy\",\"reason\":\"some technical reason\"}\n{\"decision\":\"sell\",\"reason\":\"some technical reason\"}\n{\"decision\":\"hold\",\"reason\":\"some technical reason\"}"
            }
        ]
        },
        {
        "role": "user",
        "content": [
            {
            "type": "text",
            "text": df.to_json()
            }
        ]
        },
        {
        "role": "assistant",
        "content": [
            {
            "type": "text",
            "text": "{\"decision\":\"hold\",\"reason\":\"The price is oscillating around previous highs with minor corrections but has not shown a clear trend. The current price levels appear to be consolidating, suggesting a wait-and-see approach.\"}"
            }
        ]
        }
    ],
    response_format={
        "type": "json_object"
    },
    )
    result=response.choices[0].message.content

    #3. AI의 판단에 따라 실제로 자동매매 진행하기
    import json
    result=json.loads(result)
    import pyupbit
    #upbit login
    access = os.getenv("UPBIT_ACCESS_KEY")          # 본인 값으로 변경
    secret = os.getenv("UPBIT_SECRET_KEY")          # 본인 값으로 변경
    upbit = pyupbit.Upbit(access, secret)

    print("### AI Decision: ", result["decision"].upper(),"###")
    print(f"### Reason: {result['reason']} ###")

    if result["decision"] == "buy":  #매수       
        my_krw = upbit.get_balance("KRW")
        if my_krw*0.9995>5000:
            print("### Buy Order Executed ###")
            print(upbit.buy_market_order("KRW-BTC",my_krw*0.9995))
            #upbit.buy_market_order("KRW-BTC",my_krw*0.9995) #수수료제외한 금액
            print("### Buy Order Failed: Insufficient KRW (less than 5000 KRW) ###")
        else:
            print("krw 5000원 미만")

    elif result["decision"] == "sell":
        # 매도
        my_btc= upbit.get_balance("KRW-BTC")
        current_price=pyupbit.get_orderbook(ticker="KRW-BTC")['orderbook_units'][0]["ask_price"]
        if my_btc*current_price>5000:
            print("### Sell Order Executed ###")
            print(upbit.sell_market_order("KRW-BTC", my_btc))            
        else:
            print("btc 5000원 미만")
    elif result["decision"] == "hold":
        # 지나감
        print("### Hold Position ###")
while True:
    import time
    time.sleep(20)
    ai_tranding()
